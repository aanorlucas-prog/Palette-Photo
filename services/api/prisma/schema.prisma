generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  address   String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients  Client[]
  quotes   Quote[]
  invoices Invoice[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // âœ… Relations
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  quotes   Quote[]
  invoices Invoice[]
}

model Quote {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  amount      Float
  status      String   @default("pending") // e.g., pending | approved | rejected
  createdAt   DateTime @default(now())

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?

  invoices Invoice[]
}

model Invoice {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  issueDate DateTime @default(now())
  dueDate   DateTime
  amount    Float
  status    String   @default("pending")

  // Relations
  quoteId Int?
  quote   Quote? @relation(fields: [quoteId], references: [id], onDelete: SetNull)

  clientId Int
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
